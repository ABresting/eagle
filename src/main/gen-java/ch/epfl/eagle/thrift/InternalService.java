/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ch.epfl.eagle.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-03")
public class InternalService {

  public interface Iface {

    public boolean enqueueTaskReservations(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request) throws org.apache.thrift.TException;

    public void cancelTaskReservations(ch.epfl.eagle.thrift.TCancelTaskReservationsRequest request) throws org.apache.thrift.TException;

    public List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest> sendTasksReservations() throws org.apache.thrift.TException;

    public ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse probeEnqueueTaskReservations(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request) throws org.apache.thrift.TException;

    public boolean enqueueTasksCentralized(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request, List<String> notExecutingLong, double longStatusTimestamp) throws org.apache.thrift.TException;

    public void receiveGossip(List<String> notExecutingLong, double longStatusTimestamp, int round) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void enqueueTaskReservations(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelTaskReservations(ch.epfl.eagle.thrift.TCancelTaskReservationsRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendTasksReservations(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void probeEnqueueTaskReservations(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void enqueueTasksCentralized(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request, List<String> notExecutingLong, double longStatusTimestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void receiveGossip(List<String> notExecutingLong, double longStatusTimestamp, int round, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean enqueueTaskReservations(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request) throws org.apache.thrift.TException
    {
      send_enqueueTaskReservations(request);
      return recv_enqueueTaskReservations();
    }

    public void send_enqueueTaskReservations(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request) throws org.apache.thrift.TException
    {
      enqueueTaskReservations_args args = new enqueueTaskReservations_args();
      args.setRequest(request);
      sendBase("enqueueTaskReservations", args);
    }

    public boolean recv_enqueueTaskReservations() throws org.apache.thrift.TException
    {
      enqueueTaskReservations_result result = new enqueueTaskReservations_result();
      receiveBase(result, "enqueueTaskReservations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "enqueueTaskReservations failed: unknown result");
    }

    public void cancelTaskReservations(ch.epfl.eagle.thrift.TCancelTaskReservationsRequest request) throws org.apache.thrift.TException
    {
      send_cancelTaskReservations(request);
      recv_cancelTaskReservations();
    }

    public void send_cancelTaskReservations(ch.epfl.eagle.thrift.TCancelTaskReservationsRequest request) throws org.apache.thrift.TException
    {
      cancelTaskReservations_args args = new cancelTaskReservations_args();
      args.setRequest(request);
      sendBase("cancelTaskReservations", args);
    }

    public void recv_cancelTaskReservations() throws org.apache.thrift.TException
    {
      cancelTaskReservations_result result = new cancelTaskReservations_result();
      receiveBase(result, "cancelTaskReservations");
      return;
    }

    public List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest> sendTasksReservations() throws org.apache.thrift.TException
    {
      send_sendTasksReservations();
      return recv_sendTasksReservations();
    }

    public void send_sendTasksReservations() throws org.apache.thrift.TException
    {
      sendTasksReservations_args args = new sendTasksReservations_args();
      sendBase("sendTasksReservations", args);
    }

    public List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest> recv_sendTasksReservations() throws org.apache.thrift.TException
    {
      sendTasksReservations_result result = new sendTasksReservations_result();
      receiveBase(result, "sendTasksReservations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendTasksReservations failed: unknown result");
    }

    public ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse probeEnqueueTaskReservations(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request) throws org.apache.thrift.TException
    {
      send_probeEnqueueTaskReservations(request);
      return recv_probeEnqueueTaskReservations();
    }

    public void send_probeEnqueueTaskReservations(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request) throws org.apache.thrift.TException
    {
      probeEnqueueTaskReservations_args args = new probeEnqueueTaskReservations_args();
      args.setRequest(request);
      sendBase("probeEnqueueTaskReservations", args);
    }

    public ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse recv_probeEnqueueTaskReservations() throws org.apache.thrift.TException
    {
      probeEnqueueTaskReservations_result result = new probeEnqueueTaskReservations_result();
      receiveBase(result, "probeEnqueueTaskReservations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "probeEnqueueTaskReservations failed: unknown result");
    }

    public boolean enqueueTasksCentralized(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request, List<String> notExecutingLong, double longStatusTimestamp) throws org.apache.thrift.TException
    {
      send_enqueueTasksCentralized(request, notExecutingLong, longStatusTimestamp);
      return recv_enqueueTasksCentralized();
    }

    public void send_enqueueTasksCentralized(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request, List<String> notExecutingLong, double longStatusTimestamp) throws org.apache.thrift.TException
    {
      enqueueTasksCentralized_args args = new enqueueTasksCentralized_args();
      args.setRequest(request);
      args.setNotExecutingLong(notExecutingLong);
      args.setLongStatusTimestamp(longStatusTimestamp);
      sendBase("enqueueTasksCentralized", args);
    }

    public boolean recv_enqueueTasksCentralized() throws org.apache.thrift.TException
    {
      enqueueTasksCentralized_result result = new enqueueTasksCentralized_result();
      receiveBase(result, "enqueueTasksCentralized");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "enqueueTasksCentralized failed: unknown result");
    }

    public void receiveGossip(List<String> notExecutingLong, double longStatusTimestamp, int round) throws org.apache.thrift.TException
    {
      send_receiveGossip(notExecutingLong, longStatusTimestamp, round);
      recv_receiveGossip();
    }

    public void send_receiveGossip(List<String> notExecutingLong, double longStatusTimestamp, int round) throws org.apache.thrift.TException
    {
      receiveGossip_args args = new receiveGossip_args();
      args.setNotExecutingLong(notExecutingLong);
      args.setLongStatusTimestamp(longStatusTimestamp);
      args.setRound(round);
      sendBase("receiveGossip", args);
    }

    public void recv_receiveGossip() throws org.apache.thrift.TException
    {
      receiveGossip_result result = new receiveGossip_result();
      receiveBase(result, "receiveGossip");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void enqueueTaskReservations(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enqueueTaskReservations_call method_call = new enqueueTaskReservations_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enqueueTaskReservations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request;
      public enqueueTaskReservations_call(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enqueueTaskReservations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enqueueTaskReservations_args args = new enqueueTaskReservations_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_enqueueTaskReservations();
      }
    }

    public void cancelTaskReservations(ch.epfl.eagle.thrift.TCancelTaskReservationsRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelTaskReservations_call method_call = new cancelTaskReservations_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelTaskReservations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ch.epfl.eagle.thrift.TCancelTaskReservationsRequest request;
      public cancelTaskReservations_call(ch.epfl.eagle.thrift.TCancelTaskReservationsRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelTaskReservations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelTaskReservations_args args = new cancelTaskReservations_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_cancelTaskReservations();
      }
    }

    public void sendTasksReservations(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendTasksReservations_call method_call = new sendTasksReservations_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendTasksReservations_call extends org.apache.thrift.async.TAsyncMethodCall {
      public sendTasksReservations_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendTasksReservations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendTasksReservations_args args = new sendTasksReservations_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendTasksReservations();
      }
    }

    public void probeEnqueueTaskReservations(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      probeEnqueueTaskReservations_call method_call = new probeEnqueueTaskReservations_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class probeEnqueueTaskReservations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request;
      public probeEnqueueTaskReservations_call(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("probeEnqueueTaskReservations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        probeEnqueueTaskReservations_args args = new probeEnqueueTaskReservations_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_probeEnqueueTaskReservations();
      }
    }

    public void enqueueTasksCentralized(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request, List<String> notExecutingLong, double longStatusTimestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enqueueTasksCentralized_call method_call = new enqueueTasksCentralized_call(request, notExecutingLong, longStatusTimestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enqueueTasksCentralized_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request;
      private List<String> notExecutingLong;
      private double longStatusTimestamp;
      public enqueueTasksCentralized_call(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request, List<String> notExecutingLong, double longStatusTimestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.notExecutingLong = notExecutingLong;
        this.longStatusTimestamp = longStatusTimestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enqueueTasksCentralized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enqueueTasksCentralized_args args = new enqueueTasksCentralized_args();
        args.setRequest(request);
        args.setNotExecutingLong(notExecutingLong);
        args.setLongStatusTimestamp(longStatusTimestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_enqueueTasksCentralized();
      }
    }

    public void receiveGossip(List<String> notExecutingLong, double longStatusTimestamp, int round, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveGossip_call method_call = new receiveGossip_call(notExecutingLong, longStatusTimestamp, round, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveGossip_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> notExecutingLong;
      private double longStatusTimestamp;
      private int round;
      public receiveGossip_call(List<String> notExecutingLong, double longStatusTimestamp, int round, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.notExecutingLong = notExecutingLong;
        this.longStatusTimestamp = longStatusTimestamp;
        this.round = round;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveGossip", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveGossip_args args = new receiveGossip_args();
        args.setNotExecutingLong(notExecutingLong);
        args.setLongStatusTimestamp(longStatusTimestamp);
        args.setRound(round);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_receiveGossip();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("enqueueTaskReservations", new enqueueTaskReservations());
      processMap.put("cancelTaskReservations", new cancelTaskReservations());
      processMap.put("sendTasksReservations", new sendTasksReservations());
      processMap.put("probeEnqueueTaskReservations", new probeEnqueueTaskReservations());
      processMap.put("enqueueTasksCentralized", new enqueueTasksCentralized());
      processMap.put("receiveGossip", new receiveGossip());
      return processMap;
    }

    public static class enqueueTaskReservations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enqueueTaskReservations_args> {
      public enqueueTaskReservations() {
        super("enqueueTaskReservations");
      }

      public enqueueTaskReservations_args getEmptyArgsInstance() {
        return new enqueueTaskReservations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enqueueTaskReservations_result getResult(I iface, enqueueTaskReservations_args args) throws org.apache.thrift.TException {
        enqueueTaskReservations_result result = new enqueueTaskReservations_result();
        result.success = iface.enqueueTaskReservations(args.request);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class cancelTaskReservations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelTaskReservations_args> {
      public cancelTaskReservations() {
        super("cancelTaskReservations");
      }

      public cancelTaskReservations_args getEmptyArgsInstance() {
        return new cancelTaskReservations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelTaskReservations_result getResult(I iface, cancelTaskReservations_args args) throws org.apache.thrift.TException {
        cancelTaskReservations_result result = new cancelTaskReservations_result();
        iface.cancelTaskReservations(args.request);
        return result;
      }
    }

    public static class sendTasksReservations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendTasksReservations_args> {
      public sendTasksReservations() {
        super("sendTasksReservations");
      }

      public sendTasksReservations_args getEmptyArgsInstance() {
        return new sendTasksReservations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendTasksReservations_result getResult(I iface, sendTasksReservations_args args) throws org.apache.thrift.TException {
        sendTasksReservations_result result = new sendTasksReservations_result();
        result.success = iface.sendTasksReservations();
        return result;
      }
    }

    public static class probeEnqueueTaskReservations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, probeEnqueueTaskReservations_args> {
      public probeEnqueueTaskReservations() {
        super("probeEnqueueTaskReservations");
      }

      public probeEnqueueTaskReservations_args getEmptyArgsInstance() {
        return new probeEnqueueTaskReservations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public probeEnqueueTaskReservations_result getResult(I iface, probeEnqueueTaskReservations_args args) throws org.apache.thrift.TException {
        probeEnqueueTaskReservations_result result = new probeEnqueueTaskReservations_result();
        result.success = iface.probeEnqueueTaskReservations(args.request);
        return result;
      }
    }

    public static class enqueueTasksCentralized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enqueueTasksCentralized_args> {
      public enqueueTasksCentralized() {
        super("enqueueTasksCentralized");
      }

      public enqueueTasksCentralized_args getEmptyArgsInstance() {
        return new enqueueTasksCentralized_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enqueueTasksCentralized_result getResult(I iface, enqueueTasksCentralized_args args) throws org.apache.thrift.TException {
        enqueueTasksCentralized_result result = new enqueueTasksCentralized_result();
        result.success = iface.enqueueTasksCentralized(args.request, args.notExecutingLong, args.longStatusTimestamp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class receiveGossip<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveGossip_args> {
      public receiveGossip() {
        super("receiveGossip");
      }

      public receiveGossip_args getEmptyArgsInstance() {
        return new receiveGossip_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public receiveGossip_result getResult(I iface, receiveGossip_args args) throws org.apache.thrift.TException {
        receiveGossip_result result = new receiveGossip_result();
        iface.receiveGossip(args.notExecutingLong, args.longStatusTimestamp, args.round);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("enqueueTaskReservations", new enqueueTaskReservations());
      processMap.put("cancelTaskReservations", new cancelTaskReservations());
      processMap.put("sendTasksReservations", new sendTasksReservations());
      processMap.put("probeEnqueueTaskReservations", new probeEnqueueTaskReservations());
      processMap.put("enqueueTasksCentralized", new enqueueTasksCentralized());
      processMap.put("receiveGossip", new receiveGossip());
      return processMap;
    }

    public static class enqueueTaskReservations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, enqueueTaskReservations_args, Boolean> {
      public enqueueTaskReservations() {
        super("enqueueTaskReservations");
      }

      public enqueueTaskReservations_args getEmptyArgsInstance() {
        return new enqueueTaskReservations_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            enqueueTaskReservations_result result = new enqueueTaskReservations_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            enqueueTaskReservations_result result = new enqueueTaskReservations_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, enqueueTaskReservations_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.enqueueTaskReservations(args.request,resultHandler);
      }
    }

    public static class cancelTaskReservations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelTaskReservations_args, Void> {
      public cancelTaskReservations() {
        super("cancelTaskReservations");
      }

      public cancelTaskReservations_args getEmptyArgsInstance() {
        return new cancelTaskReservations_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            cancelTaskReservations_result result = new cancelTaskReservations_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelTaskReservations_result result = new cancelTaskReservations_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelTaskReservations_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.cancelTaskReservations(args.request,resultHandler);
      }
    }

    public static class sendTasksReservations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendTasksReservations_args, List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest>> {
      public sendTasksReservations() {
        super("sendTasksReservations");
      }

      public sendTasksReservations_args getEmptyArgsInstance() {
        return new sendTasksReservations_args();
      }

      public AsyncMethodCallback<List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest>>() { 
          public void onComplete(List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest> o) {
            sendTasksReservations_result result = new sendTasksReservations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendTasksReservations_result result = new sendTasksReservations_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendTasksReservations_args args, org.apache.thrift.async.AsyncMethodCallback<List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest>> resultHandler) throws TException {
        iface.sendTasksReservations(resultHandler);
      }
    }

    public static class probeEnqueueTaskReservations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, probeEnqueueTaskReservations_args, ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse> {
      public probeEnqueueTaskReservations() {
        super("probeEnqueueTaskReservations");
      }

      public probeEnqueueTaskReservations_args getEmptyArgsInstance() {
        return new probeEnqueueTaskReservations_args();
      }

      public AsyncMethodCallback<ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse>() { 
          public void onComplete(ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse o) {
            probeEnqueueTaskReservations_result result = new probeEnqueueTaskReservations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            probeEnqueueTaskReservations_result result = new probeEnqueueTaskReservations_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, probeEnqueueTaskReservations_args args, org.apache.thrift.async.AsyncMethodCallback<ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse> resultHandler) throws TException {
        iface.probeEnqueueTaskReservations(args.request,resultHandler);
      }
    }

    public static class enqueueTasksCentralized<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, enqueueTasksCentralized_args, Boolean> {
      public enqueueTasksCentralized() {
        super("enqueueTasksCentralized");
      }

      public enqueueTasksCentralized_args getEmptyArgsInstance() {
        return new enqueueTasksCentralized_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            enqueueTasksCentralized_result result = new enqueueTasksCentralized_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            enqueueTasksCentralized_result result = new enqueueTasksCentralized_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, enqueueTasksCentralized_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.enqueueTasksCentralized(args.request, args.notExecutingLong, args.longStatusTimestamp,resultHandler);
      }
    }

    public static class receiveGossip<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, receiveGossip_args, Void> {
      public receiveGossip() {
        super("receiveGossip");
      }

      public receiveGossip_args getEmptyArgsInstance() {
        return new receiveGossip_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            receiveGossip_result result = new receiveGossip_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            receiveGossip_result result = new receiveGossip_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, receiveGossip_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.receiveGossip(args.notExecutingLong, args.longStatusTimestamp, args.round,resultHandler);
      }
    }

  }

  public static class enqueueTaskReservations_args implements org.apache.thrift.TBase<enqueueTaskReservations_args, enqueueTaskReservations_args._Fields>, java.io.Serializable, Cloneable, Comparable<enqueueTaskReservations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enqueueTaskReservations_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enqueueTaskReservations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enqueueTaskReservations_argsTupleSchemeFactory());
    }

    public ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enqueueTaskReservations_args.class, metaDataMap);
    }

    public enqueueTaskReservations_args() {
    }

    public enqueueTaskReservations_args(
      ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enqueueTaskReservations_args(enqueueTaskReservations_args other) {
      if (other.isSetRequest()) {
        this.request = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest(other.request);
      }
    }

    public enqueueTaskReservations_args deepCopy() {
      return new enqueueTaskReservations_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest getRequest() {
      return this.request;
    }

    public enqueueTaskReservations_args setRequest(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enqueueTaskReservations_args)
        return this.equals((enqueueTaskReservations_args)that);
      return false;
    }

    public boolean equals(enqueueTaskReservations_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(enqueueTaskReservations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enqueueTaskReservations_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enqueueTaskReservations_argsStandardSchemeFactory implements SchemeFactory {
      public enqueueTaskReservations_argsStandardScheme getScheme() {
        return new enqueueTaskReservations_argsStandardScheme();
      }
    }

    private static class enqueueTaskReservations_argsStandardScheme extends StandardScheme<enqueueTaskReservations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enqueueTaskReservations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enqueueTaskReservations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enqueueTaskReservations_argsTupleSchemeFactory implements SchemeFactory {
      public enqueueTaskReservations_argsTupleScheme getScheme() {
        return new enqueueTaskReservations_argsTupleScheme();
      }
    }

    private static class enqueueTaskReservations_argsTupleScheme extends TupleScheme<enqueueTaskReservations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enqueueTaskReservations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enqueueTaskReservations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class enqueueTaskReservations_result implements org.apache.thrift.TBase<enqueueTaskReservations_result, enqueueTaskReservations_result._Fields>, java.io.Serializable, Cloneable, Comparable<enqueueTaskReservations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enqueueTaskReservations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enqueueTaskReservations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enqueueTaskReservations_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enqueueTaskReservations_result.class, metaDataMap);
    }

    public enqueueTaskReservations_result() {
    }

    public enqueueTaskReservations_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enqueueTaskReservations_result(enqueueTaskReservations_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public enqueueTaskReservations_result deepCopy() {
      return new enqueueTaskReservations_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public enqueueTaskReservations_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enqueueTaskReservations_result)
        return this.equals((enqueueTaskReservations_result)that);
      return false;
    }

    public boolean equals(enqueueTaskReservations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(enqueueTaskReservations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enqueueTaskReservations_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enqueueTaskReservations_resultStandardSchemeFactory implements SchemeFactory {
      public enqueueTaskReservations_resultStandardScheme getScheme() {
        return new enqueueTaskReservations_resultStandardScheme();
      }
    }

    private static class enqueueTaskReservations_resultStandardScheme extends StandardScheme<enqueueTaskReservations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enqueueTaskReservations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enqueueTaskReservations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enqueueTaskReservations_resultTupleSchemeFactory implements SchemeFactory {
      public enqueueTaskReservations_resultTupleScheme getScheme() {
        return new enqueueTaskReservations_resultTupleScheme();
      }
    }

    private static class enqueueTaskReservations_resultTupleScheme extends TupleScheme<enqueueTaskReservations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enqueueTaskReservations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enqueueTaskReservations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelTaskReservations_args implements org.apache.thrift.TBase<cancelTaskReservations_args, cancelTaskReservations_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelTaskReservations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelTaskReservations_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelTaskReservations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelTaskReservations_argsTupleSchemeFactory());
    }

    public ch.epfl.eagle.thrift.TCancelTaskReservationsRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ch.epfl.eagle.thrift.TCancelTaskReservationsRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelTaskReservations_args.class, metaDataMap);
    }

    public cancelTaskReservations_args() {
    }

    public cancelTaskReservations_args(
      ch.epfl.eagle.thrift.TCancelTaskReservationsRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelTaskReservations_args(cancelTaskReservations_args other) {
      if (other.isSetRequest()) {
        this.request = new ch.epfl.eagle.thrift.TCancelTaskReservationsRequest(other.request);
      }
    }

    public cancelTaskReservations_args deepCopy() {
      return new cancelTaskReservations_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public ch.epfl.eagle.thrift.TCancelTaskReservationsRequest getRequest() {
      return this.request;
    }

    public cancelTaskReservations_args setRequest(ch.epfl.eagle.thrift.TCancelTaskReservationsRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((ch.epfl.eagle.thrift.TCancelTaskReservationsRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelTaskReservations_args)
        return this.equals((cancelTaskReservations_args)that);
      return false;
    }

    public boolean equals(cancelTaskReservations_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelTaskReservations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelTaskReservations_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelTaskReservations_argsStandardSchemeFactory implements SchemeFactory {
      public cancelTaskReservations_argsStandardScheme getScheme() {
        return new cancelTaskReservations_argsStandardScheme();
      }
    }

    private static class cancelTaskReservations_argsStandardScheme extends StandardScheme<cancelTaskReservations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelTaskReservations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new ch.epfl.eagle.thrift.TCancelTaskReservationsRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelTaskReservations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelTaskReservations_argsTupleSchemeFactory implements SchemeFactory {
      public cancelTaskReservations_argsTupleScheme getScheme() {
        return new cancelTaskReservations_argsTupleScheme();
      }
    }

    private static class cancelTaskReservations_argsTupleScheme extends TupleScheme<cancelTaskReservations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelTaskReservations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelTaskReservations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new ch.epfl.eagle.thrift.TCancelTaskReservationsRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class cancelTaskReservations_result implements org.apache.thrift.TBase<cancelTaskReservations_result, cancelTaskReservations_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelTaskReservations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelTaskReservations_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelTaskReservations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelTaskReservations_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelTaskReservations_result.class, metaDataMap);
    }

    public cancelTaskReservations_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelTaskReservations_result(cancelTaskReservations_result other) {
    }

    public cancelTaskReservations_result deepCopy() {
      return new cancelTaskReservations_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelTaskReservations_result)
        return this.equals((cancelTaskReservations_result)that);
      return false;
    }

    public boolean equals(cancelTaskReservations_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelTaskReservations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelTaskReservations_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelTaskReservations_resultStandardSchemeFactory implements SchemeFactory {
      public cancelTaskReservations_resultStandardScheme getScheme() {
        return new cancelTaskReservations_resultStandardScheme();
      }
    }

    private static class cancelTaskReservations_resultStandardScheme extends StandardScheme<cancelTaskReservations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelTaskReservations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelTaskReservations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelTaskReservations_resultTupleSchemeFactory implements SchemeFactory {
      public cancelTaskReservations_resultTupleScheme getScheme() {
        return new cancelTaskReservations_resultTupleScheme();
      }
    }

    private static class cancelTaskReservations_resultTupleScheme extends TupleScheme<cancelTaskReservations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelTaskReservations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelTaskReservations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sendTasksReservations_args implements org.apache.thrift.TBase<sendTasksReservations_args, sendTasksReservations_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendTasksReservations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTasksReservations_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTasksReservations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTasksReservations_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTasksReservations_args.class, metaDataMap);
    }

    public sendTasksReservations_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTasksReservations_args(sendTasksReservations_args other) {
    }

    public sendTasksReservations_args deepCopy() {
      return new sendTasksReservations_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTasksReservations_args)
        return this.equals((sendTasksReservations_args)that);
      return false;
    }

    public boolean equals(sendTasksReservations_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(sendTasksReservations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTasksReservations_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTasksReservations_argsStandardSchemeFactory implements SchemeFactory {
      public sendTasksReservations_argsStandardScheme getScheme() {
        return new sendTasksReservations_argsStandardScheme();
      }
    }

    private static class sendTasksReservations_argsStandardScheme extends StandardScheme<sendTasksReservations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTasksReservations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTasksReservations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTasksReservations_argsTupleSchemeFactory implements SchemeFactory {
      public sendTasksReservations_argsTupleScheme getScheme() {
        return new sendTasksReservations_argsTupleScheme();
      }
    }

    private static class sendTasksReservations_argsTupleScheme extends TupleScheme<sendTasksReservations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTasksReservations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTasksReservations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sendTasksReservations_result implements org.apache.thrift.TBase<sendTasksReservations_result, sendTasksReservations_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendTasksReservations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTasksReservations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTasksReservations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTasksReservations_resultTupleSchemeFactory());
    }

    public List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTasksReservations_result.class, metaDataMap);
    }

    public sendTasksReservations_result() {
    }

    public sendTasksReservations_result(
      List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTasksReservations_result(sendTasksReservations_result other) {
      if (other.isSetSuccess()) {
        List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest> __this__success = new ArrayList<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest>(other.success.size());
        for (ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest other_element : other.success) {
          __this__success.add(new ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest(other_element));
        }
        this.success = __this__success;
      }
    }

    public sendTasksReservations_result deepCopy() {
      return new sendTasksReservations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest elem) {
      if (this.success == null) {
        this.success = new ArrayList<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest>();
      }
      this.success.add(elem);
    }

    public List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest> getSuccess() {
      return this.success;
    }

    public sendTasksReservations_result setSuccess(List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTasksReservations_result)
        return this.equals((sendTasksReservations_result)that);
      return false;
    }

    public boolean equals(sendTasksReservations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendTasksReservations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTasksReservations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTasksReservations_resultStandardSchemeFactory implements SchemeFactory {
      public sendTasksReservations_resultStandardScheme getScheme() {
        return new sendTasksReservations_resultStandardScheme();
      }
    }

    private static class sendTasksReservations_resultStandardScheme extends StandardScheme<sendTasksReservations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTasksReservations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest>(_list16.size);
                  ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTasksReservations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTasksReservations_resultTupleSchemeFactory implements SchemeFactory {
      public sendTasksReservations_resultTupleScheme getScheme() {
        return new sendTasksReservations_resultTupleScheme();
      }
    }

    private static class sendTasksReservations_resultTupleScheme extends TupleScheme<sendTasksReservations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTasksReservations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTasksReservations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest>(_list21.size);
            ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class probeEnqueueTaskReservations_args implements org.apache.thrift.TBase<probeEnqueueTaskReservations_args, probeEnqueueTaskReservations_args._Fields>, java.io.Serializable, Cloneable, Comparable<probeEnqueueTaskReservations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("probeEnqueueTaskReservations_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new probeEnqueueTaskReservations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new probeEnqueueTaskReservations_argsTupleSchemeFactory());
    }

    public ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(probeEnqueueTaskReservations_args.class, metaDataMap);
    }

    public probeEnqueueTaskReservations_args() {
    }

    public probeEnqueueTaskReservations_args(
      ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public probeEnqueueTaskReservations_args(probeEnqueueTaskReservations_args other) {
      if (other.isSetRequest()) {
        this.request = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest(other.request);
      }
    }

    public probeEnqueueTaskReservations_args deepCopy() {
      return new probeEnqueueTaskReservations_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest getRequest() {
      return this.request;
    }

    public probeEnqueueTaskReservations_args setRequest(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof probeEnqueueTaskReservations_args)
        return this.equals((probeEnqueueTaskReservations_args)that);
      return false;
    }

    public boolean equals(probeEnqueueTaskReservations_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(probeEnqueueTaskReservations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("probeEnqueueTaskReservations_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class probeEnqueueTaskReservations_argsStandardSchemeFactory implements SchemeFactory {
      public probeEnqueueTaskReservations_argsStandardScheme getScheme() {
        return new probeEnqueueTaskReservations_argsStandardScheme();
      }
    }

    private static class probeEnqueueTaskReservations_argsStandardScheme extends StandardScheme<probeEnqueueTaskReservations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, probeEnqueueTaskReservations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, probeEnqueueTaskReservations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class probeEnqueueTaskReservations_argsTupleSchemeFactory implements SchemeFactory {
      public probeEnqueueTaskReservations_argsTupleScheme getScheme() {
        return new probeEnqueueTaskReservations_argsTupleScheme();
      }
    }

    private static class probeEnqueueTaskReservations_argsTupleScheme extends TupleScheme<probeEnqueueTaskReservations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, probeEnqueueTaskReservations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, probeEnqueueTaskReservations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class probeEnqueueTaskReservations_result implements org.apache.thrift.TBase<probeEnqueueTaskReservations_result, probeEnqueueTaskReservations_result._Fields>, java.io.Serializable, Cloneable, Comparable<probeEnqueueTaskReservations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("probeEnqueueTaskReservations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new probeEnqueueTaskReservations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new probeEnqueueTaskReservations_resultTupleSchemeFactory());
    }

    public ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(probeEnqueueTaskReservations_result.class, metaDataMap);
    }

    public probeEnqueueTaskReservations_result() {
    }

    public probeEnqueueTaskReservations_result(
      ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public probeEnqueueTaskReservations_result(probeEnqueueTaskReservations_result other) {
      if (other.isSetSuccess()) {
        this.success = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse(other.success);
      }
    }

    public probeEnqueueTaskReservations_result deepCopy() {
      return new probeEnqueueTaskReservations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse getSuccess() {
      return this.success;
    }

    public probeEnqueueTaskReservations_result setSuccess(ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof probeEnqueueTaskReservations_result)
        return this.equals((probeEnqueueTaskReservations_result)that);
      return false;
    }

    public boolean equals(probeEnqueueTaskReservations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(probeEnqueueTaskReservations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("probeEnqueueTaskReservations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class probeEnqueueTaskReservations_resultStandardSchemeFactory implements SchemeFactory {
      public probeEnqueueTaskReservations_resultStandardScheme getScheme() {
        return new probeEnqueueTaskReservations_resultStandardScheme();
      }
    }

    private static class probeEnqueueTaskReservations_resultStandardScheme extends StandardScheme<probeEnqueueTaskReservations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, probeEnqueueTaskReservations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, probeEnqueueTaskReservations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class probeEnqueueTaskReservations_resultTupleSchemeFactory implements SchemeFactory {
      public probeEnqueueTaskReservations_resultTupleScheme getScheme() {
        return new probeEnqueueTaskReservations_resultTupleScheme();
      }
    }

    private static class probeEnqueueTaskReservations_resultTupleScheme extends TupleScheme<probeEnqueueTaskReservations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, probeEnqueueTaskReservations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, probeEnqueueTaskReservations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class enqueueTasksCentralized_args implements org.apache.thrift.TBase<enqueueTasksCentralized_args, enqueueTasksCentralized_args._Fields>, java.io.Serializable, Cloneable, Comparable<enqueueTasksCentralized_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enqueueTasksCentralized_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOT_EXECUTING_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("notExecutingLong", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField LONG_STATUS_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("longStatusTimestamp", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enqueueTasksCentralized_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enqueueTasksCentralized_argsTupleSchemeFactory());
    }

    public ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request; // required
    public List<String> notExecutingLong; // required
    public double longStatusTimestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      NOT_EXECUTING_LONG((short)2, "notExecutingLong"),
      LONG_STATUS_TIMESTAMP((short)3, "longStatusTimestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // NOT_EXECUTING_LONG
            return NOT_EXECUTING_LONG;
          case 3: // LONG_STATUS_TIMESTAMP
            return LONG_STATUS_TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LONGSTATUSTIMESTAMP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest.class)));
      tmpMap.put(_Fields.NOT_EXECUTING_LONG, new org.apache.thrift.meta_data.FieldMetaData("notExecutingLong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LONG_STATUS_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("longStatusTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enqueueTasksCentralized_args.class, metaDataMap);
    }

    public enqueueTasksCentralized_args() {
    }

    public enqueueTasksCentralized_args(
      ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request,
      List<String> notExecutingLong,
      double longStatusTimestamp)
    {
      this();
      this.request = request;
      this.notExecutingLong = notExecutingLong;
      this.longStatusTimestamp = longStatusTimestamp;
      setLongStatusTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enqueueTasksCentralized_args(enqueueTasksCentralized_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRequest()) {
        this.request = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest(other.request);
      }
      if (other.isSetNotExecutingLong()) {
        List<String> __this__notExecutingLong = new ArrayList<String>(other.notExecutingLong);
        this.notExecutingLong = __this__notExecutingLong;
      }
      this.longStatusTimestamp = other.longStatusTimestamp;
    }

    public enqueueTasksCentralized_args deepCopy() {
      return new enqueueTasksCentralized_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.notExecutingLong = null;
      setLongStatusTimestampIsSet(false);
      this.longStatusTimestamp = 0.0;
    }

    public ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest getRequest() {
      return this.request;
    }

    public enqueueTasksCentralized_args setRequest(ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public int getNotExecutingLongSize() {
      return (this.notExecutingLong == null) ? 0 : this.notExecutingLong.size();
    }

    public java.util.Iterator<String> getNotExecutingLongIterator() {
      return (this.notExecutingLong == null) ? null : this.notExecutingLong.iterator();
    }

    public void addToNotExecutingLong(String elem) {
      if (this.notExecutingLong == null) {
        this.notExecutingLong = new ArrayList<String>();
      }
      this.notExecutingLong.add(elem);
    }

    public List<String> getNotExecutingLong() {
      return this.notExecutingLong;
    }

    public enqueueTasksCentralized_args setNotExecutingLong(List<String> notExecutingLong) {
      this.notExecutingLong = notExecutingLong;
      return this;
    }

    public void unsetNotExecutingLong() {
      this.notExecutingLong = null;
    }

    /** Returns true if field notExecutingLong is set (has been assigned a value) and false otherwise */
    public boolean isSetNotExecutingLong() {
      return this.notExecutingLong != null;
    }

    public void setNotExecutingLongIsSet(boolean value) {
      if (!value) {
        this.notExecutingLong = null;
      }
    }

    public double getLongStatusTimestamp() {
      return this.longStatusTimestamp;
    }

    public enqueueTasksCentralized_args setLongStatusTimestamp(double longStatusTimestamp) {
      this.longStatusTimestamp = longStatusTimestamp;
      setLongStatusTimestampIsSet(true);
      return this;
    }

    public void unsetLongStatusTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGSTATUSTIMESTAMP_ISSET_ID);
    }

    /** Returns true if field longStatusTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetLongStatusTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __LONGSTATUSTIMESTAMP_ISSET_ID);
    }

    public void setLongStatusTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGSTATUSTIMESTAMP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest)value);
        }
        break;

      case NOT_EXECUTING_LONG:
        if (value == null) {
          unsetNotExecutingLong();
        } else {
          setNotExecutingLong((List<String>)value);
        }
        break;

      case LONG_STATUS_TIMESTAMP:
        if (value == null) {
          unsetLongStatusTimestamp();
        } else {
          setLongStatusTimestamp((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case NOT_EXECUTING_LONG:
        return getNotExecutingLong();

      case LONG_STATUS_TIMESTAMP:
        return getLongStatusTimestamp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case NOT_EXECUTING_LONG:
        return isSetNotExecutingLong();
      case LONG_STATUS_TIMESTAMP:
        return isSetLongStatusTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enqueueTasksCentralized_args)
        return this.equals((enqueueTasksCentralized_args)that);
      return false;
    }

    public boolean equals(enqueueTasksCentralized_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_notExecutingLong = true && this.isSetNotExecutingLong();
      boolean that_present_notExecutingLong = true && that.isSetNotExecutingLong();
      if (this_present_notExecutingLong || that_present_notExecutingLong) {
        if (!(this_present_notExecutingLong && that_present_notExecutingLong))
          return false;
        if (!this.notExecutingLong.equals(that.notExecutingLong))
          return false;
      }

      boolean this_present_longStatusTimestamp = true;
      boolean that_present_longStatusTimestamp = true;
      if (this_present_longStatusTimestamp || that_present_longStatusTimestamp) {
        if (!(this_present_longStatusTimestamp && that_present_longStatusTimestamp))
          return false;
        if (this.longStatusTimestamp != that.longStatusTimestamp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      boolean present_notExecutingLong = true && (isSetNotExecutingLong());
      list.add(present_notExecutingLong);
      if (present_notExecutingLong)
        list.add(notExecutingLong);

      boolean present_longStatusTimestamp = true;
      list.add(present_longStatusTimestamp);
      if (present_longStatusTimestamp)
        list.add(longStatusTimestamp);

      return list.hashCode();
    }

    @Override
    public int compareTo(enqueueTasksCentralized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotExecutingLong()).compareTo(other.isSetNotExecutingLong());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotExecutingLong()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notExecutingLong, other.notExecutingLong);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLongStatusTimestamp()).compareTo(other.isSetLongStatusTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLongStatusTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longStatusTimestamp, other.longStatusTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enqueueTasksCentralized_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notExecutingLong:");
      if (this.notExecutingLong == null) {
        sb.append("null");
      } else {
        sb.append(this.notExecutingLong);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("longStatusTimestamp:");
      sb.append(this.longStatusTimestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enqueueTasksCentralized_argsStandardSchemeFactory implements SchemeFactory {
      public enqueueTasksCentralized_argsStandardScheme getScheme() {
        return new enqueueTasksCentralized_argsStandardScheme();
      }
    }

    private static class enqueueTasksCentralized_argsStandardScheme extends StandardScheme<enqueueTasksCentralized_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enqueueTasksCentralized_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOT_EXECUTING_LONG
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.notExecutingLong = new ArrayList<String>(_list24.size);
                  String _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readString();
                    struct.notExecutingLong.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setNotExecutingLongIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LONG_STATUS_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.longStatusTimestamp = iprot.readDouble();
                struct.setLongStatusTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enqueueTasksCentralized_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notExecutingLong != null) {
          oprot.writeFieldBegin(NOT_EXECUTING_LONG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.notExecutingLong.size()));
            for (String _iter27 : struct.notExecutingLong)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LONG_STATUS_TIMESTAMP_FIELD_DESC);
        oprot.writeDouble(struct.longStatusTimestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enqueueTasksCentralized_argsTupleSchemeFactory implements SchemeFactory {
      public enqueueTasksCentralized_argsTupleScheme getScheme() {
        return new enqueueTasksCentralized_argsTupleScheme();
      }
    }

    private static class enqueueTasksCentralized_argsTupleScheme extends TupleScheme<enqueueTasksCentralized_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enqueueTasksCentralized_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetNotExecutingLong()) {
          optionals.set(1);
        }
        if (struct.isSetLongStatusTimestamp()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetNotExecutingLong()) {
          {
            oprot.writeI32(struct.notExecutingLong.size());
            for (String _iter28 : struct.notExecutingLong)
            {
              oprot.writeString(_iter28);
            }
          }
        }
        if (struct.isSetLongStatusTimestamp()) {
          oprot.writeDouble(struct.longStatusTimestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enqueueTasksCentralized_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.request = new ch.epfl.eagle.thrift.TEnqueueTaskReservationsRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.notExecutingLong = new ArrayList<String>(_list29.size);
            String _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readString();
              struct.notExecutingLong.add(_elem30);
            }
          }
          struct.setNotExecutingLongIsSet(true);
        }
        if (incoming.get(2)) {
          struct.longStatusTimestamp = iprot.readDouble();
          struct.setLongStatusTimestampIsSet(true);
        }
      }
    }

  }

  public static class enqueueTasksCentralized_result implements org.apache.thrift.TBase<enqueueTasksCentralized_result, enqueueTasksCentralized_result._Fields>, java.io.Serializable, Cloneable, Comparable<enqueueTasksCentralized_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enqueueTasksCentralized_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enqueueTasksCentralized_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enqueueTasksCentralized_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enqueueTasksCentralized_result.class, metaDataMap);
    }

    public enqueueTasksCentralized_result() {
    }

    public enqueueTasksCentralized_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enqueueTasksCentralized_result(enqueueTasksCentralized_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public enqueueTasksCentralized_result deepCopy() {
      return new enqueueTasksCentralized_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public enqueueTasksCentralized_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enqueueTasksCentralized_result)
        return this.equals((enqueueTasksCentralized_result)that);
      return false;
    }

    public boolean equals(enqueueTasksCentralized_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(enqueueTasksCentralized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enqueueTasksCentralized_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enqueueTasksCentralized_resultStandardSchemeFactory implements SchemeFactory {
      public enqueueTasksCentralized_resultStandardScheme getScheme() {
        return new enqueueTasksCentralized_resultStandardScheme();
      }
    }

    private static class enqueueTasksCentralized_resultStandardScheme extends StandardScheme<enqueueTasksCentralized_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enqueueTasksCentralized_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enqueueTasksCentralized_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enqueueTasksCentralized_resultTupleSchemeFactory implements SchemeFactory {
      public enqueueTasksCentralized_resultTupleScheme getScheme() {
        return new enqueueTasksCentralized_resultTupleScheme();
      }
    }

    private static class enqueueTasksCentralized_resultTupleScheme extends TupleScheme<enqueueTasksCentralized_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enqueueTasksCentralized_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enqueueTasksCentralized_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class receiveGossip_args implements org.apache.thrift.TBase<receiveGossip_args, receiveGossip_args._Fields>, java.io.Serializable, Cloneable, Comparable<receiveGossip_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveGossip_args");

    private static final org.apache.thrift.protocol.TField NOT_EXECUTING_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("notExecutingLong", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField LONG_STATUS_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("longStatusTimestamp", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("round", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveGossip_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveGossip_argsTupleSchemeFactory());
    }

    public List<String> notExecutingLong; // required
    public double longStatusTimestamp; // required
    public int round; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOT_EXECUTING_LONG((short)1, "notExecutingLong"),
      LONG_STATUS_TIMESTAMP((short)2, "longStatusTimestamp"),
      ROUND((short)3, "round");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOT_EXECUTING_LONG
            return NOT_EXECUTING_LONG;
          case 2: // LONG_STATUS_TIMESTAMP
            return LONG_STATUS_TIMESTAMP;
          case 3: // ROUND
            return ROUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LONGSTATUSTIMESTAMP_ISSET_ID = 0;
    private static final int __ROUND_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOT_EXECUTING_LONG, new org.apache.thrift.meta_data.FieldMetaData("notExecutingLong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LONG_STATUS_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("longStatusTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.ROUND, new org.apache.thrift.meta_data.FieldMetaData("round", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveGossip_args.class, metaDataMap);
    }

    public receiveGossip_args() {
    }

    public receiveGossip_args(
      List<String> notExecutingLong,
      double longStatusTimestamp,
      int round)
    {
      this();
      this.notExecutingLong = notExecutingLong;
      this.longStatusTimestamp = longStatusTimestamp;
      setLongStatusTimestampIsSet(true);
      this.round = round;
      setRoundIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveGossip_args(receiveGossip_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNotExecutingLong()) {
        List<String> __this__notExecutingLong = new ArrayList<String>(other.notExecutingLong);
        this.notExecutingLong = __this__notExecutingLong;
      }
      this.longStatusTimestamp = other.longStatusTimestamp;
      this.round = other.round;
    }

    public receiveGossip_args deepCopy() {
      return new receiveGossip_args(this);
    }

    @Override
    public void clear() {
      this.notExecutingLong = null;
      setLongStatusTimestampIsSet(false);
      this.longStatusTimestamp = 0.0;
      setRoundIsSet(false);
      this.round = 0;
    }

    public int getNotExecutingLongSize() {
      return (this.notExecutingLong == null) ? 0 : this.notExecutingLong.size();
    }

    public java.util.Iterator<String> getNotExecutingLongIterator() {
      return (this.notExecutingLong == null) ? null : this.notExecutingLong.iterator();
    }

    public void addToNotExecutingLong(String elem) {
      if (this.notExecutingLong == null) {
        this.notExecutingLong = new ArrayList<String>();
      }
      this.notExecutingLong.add(elem);
    }

    public List<String> getNotExecutingLong() {
      return this.notExecutingLong;
    }

    public receiveGossip_args setNotExecutingLong(List<String> notExecutingLong) {
      this.notExecutingLong = notExecutingLong;
      return this;
    }

    public void unsetNotExecutingLong() {
      this.notExecutingLong = null;
    }

    /** Returns true if field notExecutingLong is set (has been assigned a value) and false otherwise */
    public boolean isSetNotExecutingLong() {
      return this.notExecutingLong != null;
    }

    public void setNotExecutingLongIsSet(boolean value) {
      if (!value) {
        this.notExecutingLong = null;
      }
    }

    public double getLongStatusTimestamp() {
      return this.longStatusTimestamp;
    }

    public receiveGossip_args setLongStatusTimestamp(double longStatusTimestamp) {
      this.longStatusTimestamp = longStatusTimestamp;
      setLongStatusTimestampIsSet(true);
      return this;
    }

    public void unsetLongStatusTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGSTATUSTIMESTAMP_ISSET_ID);
    }

    /** Returns true if field longStatusTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetLongStatusTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __LONGSTATUSTIMESTAMP_ISSET_ID);
    }

    public void setLongStatusTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGSTATUSTIMESTAMP_ISSET_ID, value);
    }

    public int getRound() {
      return this.round;
    }

    public receiveGossip_args setRound(int round) {
      this.round = round;
      setRoundIsSet(true);
      return this;
    }

    public void unsetRound() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROUND_ISSET_ID);
    }

    /** Returns true if field round is set (has been assigned a value) and false otherwise */
    public boolean isSetRound() {
      return EncodingUtils.testBit(__isset_bitfield, __ROUND_ISSET_ID);
    }

    public void setRoundIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROUND_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOT_EXECUTING_LONG:
        if (value == null) {
          unsetNotExecutingLong();
        } else {
          setNotExecutingLong((List<String>)value);
        }
        break;

      case LONG_STATUS_TIMESTAMP:
        if (value == null) {
          unsetLongStatusTimestamp();
        } else {
          setLongStatusTimestamp((Double)value);
        }
        break;

      case ROUND:
        if (value == null) {
          unsetRound();
        } else {
          setRound((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOT_EXECUTING_LONG:
        return getNotExecutingLong();

      case LONG_STATUS_TIMESTAMP:
        return getLongStatusTimestamp();

      case ROUND:
        return getRound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOT_EXECUTING_LONG:
        return isSetNotExecutingLong();
      case LONG_STATUS_TIMESTAMP:
        return isSetLongStatusTimestamp();
      case ROUND:
        return isSetRound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveGossip_args)
        return this.equals((receiveGossip_args)that);
      return false;
    }

    public boolean equals(receiveGossip_args that) {
      if (that == null)
        return false;

      boolean this_present_notExecutingLong = true && this.isSetNotExecutingLong();
      boolean that_present_notExecutingLong = true && that.isSetNotExecutingLong();
      if (this_present_notExecutingLong || that_present_notExecutingLong) {
        if (!(this_present_notExecutingLong && that_present_notExecutingLong))
          return false;
        if (!this.notExecutingLong.equals(that.notExecutingLong))
          return false;
      }

      boolean this_present_longStatusTimestamp = true;
      boolean that_present_longStatusTimestamp = true;
      if (this_present_longStatusTimestamp || that_present_longStatusTimestamp) {
        if (!(this_present_longStatusTimestamp && that_present_longStatusTimestamp))
          return false;
        if (this.longStatusTimestamp != that.longStatusTimestamp)
          return false;
      }

      boolean this_present_round = true;
      boolean that_present_round = true;
      if (this_present_round || that_present_round) {
        if (!(this_present_round && that_present_round))
          return false;
        if (this.round != that.round)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_notExecutingLong = true && (isSetNotExecutingLong());
      list.add(present_notExecutingLong);
      if (present_notExecutingLong)
        list.add(notExecutingLong);

      boolean present_longStatusTimestamp = true;
      list.add(present_longStatusTimestamp);
      if (present_longStatusTimestamp)
        list.add(longStatusTimestamp);

      boolean present_round = true;
      list.add(present_round);
      if (present_round)
        list.add(round);

      return list.hashCode();
    }

    @Override
    public int compareTo(receiveGossip_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNotExecutingLong()).compareTo(other.isSetNotExecutingLong());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotExecutingLong()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notExecutingLong, other.notExecutingLong);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLongStatusTimestamp()).compareTo(other.isSetLongStatusTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLongStatusTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longStatusTimestamp, other.longStatusTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRound()).compareTo(other.isSetRound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.round, other.round);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveGossip_args(");
      boolean first = true;

      sb.append("notExecutingLong:");
      if (this.notExecutingLong == null) {
        sb.append("null");
      } else {
        sb.append(this.notExecutingLong);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("longStatusTimestamp:");
      sb.append(this.longStatusTimestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("round:");
      sb.append(this.round);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveGossip_argsStandardSchemeFactory implements SchemeFactory {
      public receiveGossip_argsStandardScheme getScheme() {
        return new receiveGossip_argsStandardScheme();
      }
    }

    private static class receiveGossip_argsStandardScheme extends StandardScheme<receiveGossip_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveGossip_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOT_EXECUTING_LONG
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.notExecutingLong = new ArrayList<String>(_list32.size);
                  String _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readString();
                    struct.notExecutingLong.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setNotExecutingLongIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LONG_STATUS_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.longStatusTimestamp = iprot.readDouble();
                struct.setLongStatusTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROUND
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.round = iprot.readI32();
                struct.setRoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveGossip_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.notExecutingLong != null) {
          oprot.writeFieldBegin(NOT_EXECUTING_LONG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.notExecutingLong.size()));
            for (String _iter35 : struct.notExecutingLong)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LONG_STATUS_TIMESTAMP_FIELD_DESC);
        oprot.writeDouble(struct.longStatusTimestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ROUND_FIELD_DESC);
        oprot.writeI32(struct.round);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveGossip_argsTupleSchemeFactory implements SchemeFactory {
      public receiveGossip_argsTupleScheme getScheme() {
        return new receiveGossip_argsTupleScheme();
      }
    }

    private static class receiveGossip_argsTupleScheme extends TupleScheme<receiveGossip_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveGossip_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNotExecutingLong()) {
          optionals.set(0);
        }
        if (struct.isSetLongStatusTimestamp()) {
          optionals.set(1);
        }
        if (struct.isSetRound()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNotExecutingLong()) {
          {
            oprot.writeI32(struct.notExecutingLong.size());
            for (String _iter36 : struct.notExecutingLong)
            {
              oprot.writeString(_iter36);
            }
          }
        }
        if (struct.isSetLongStatusTimestamp()) {
          oprot.writeDouble(struct.longStatusTimestamp);
        }
        if (struct.isSetRound()) {
          oprot.writeI32(struct.round);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveGossip_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.notExecutingLong = new ArrayList<String>(_list37.size);
            String _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readString();
              struct.notExecutingLong.add(_elem38);
            }
          }
          struct.setNotExecutingLongIsSet(true);
        }
        if (incoming.get(1)) {
          struct.longStatusTimestamp = iprot.readDouble();
          struct.setLongStatusTimestampIsSet(true);
        }
        if (incoming.get(2)) {
          struct.round = iprot.readI32();
          struct.setRoundIsSet(true);
        }
      }
    }

  }

  public static class receiveGossip_result implements org.apache.thrift.TBase<receiveGossip_result, receiveGossip_result._Fields>, java.io.Serializable, Cloneable, Comparable<receiveGossip_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveGossip_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveGossip_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveGossip_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveGossip_result.class, metaDataMap);
    }

    public receiveGossip_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveGossip_result(receiveGossip_result other) {
    }

    public receiveGossip_result deepCopy() {
      return new receiveGossip_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveGossip_result)
        return this.equals((receiveGossip_result)that);
      return false;
    }

    public boolean equals(receiveGossip_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(receiveGossip_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveGossip_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveGossip_resultStandardSchemeFactory implements SchemeFactory {
      public receiveGossip_resultStandardScheme getScheme() {
        return new receiveGossip_resultStandardScheme();
      }
    }

    private static class receiveGossip_resultStandardScheme extends StandardScheme<receiveGossip_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveGossip_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveGossip_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveGossip_resultTupleSchemeFactory implements SchemeFactory {
      public receiveGossip_resultTupleScheme getScheme() {
        return new receiveGossip_resultTupleScheme();
      }
    }

    private static class receiveGossip_resultTupleScheme extends TupleScheme<receiveGossip_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveGossip_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveGossip_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
