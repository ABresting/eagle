/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ch.epfl.eagle.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-03")
public class TEnqueueTaskReservationsResponse implements org.apache.thrift.TBase<TEnqueueTaskReservationsResponse, TEnqueueTaskReservationsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TEnqueueTaskReservationsResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEnqueueTaskReservationsResponse");

  private static final org.apache.thrift.protocol.TField SOCKET_OK_FIELD_DESC = new org.apache.thrift.protocol.TField("socketOK", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField LONG_IN_QUEUE_FIELD_DESC = new org.apache.thrift.protocol.TField("longInQueue", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField NOT_EXECUTING_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("notExecutingLong", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField LONG_STATUS_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("longStatusTimestamp", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEnqueueTaskReservationsResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEnqueueTaskReservationsResponseTupleSchemeFactory());
  }

  public boolean socketOK; // required
  public boolean longInQueue; // required
  public List<String> notExecutingLong; // required
  public double longStatusTimestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SOCKET_OK((short)1, "socketOK"),
    LONG_IN_QUEUE((short)2, "longInQueue"),
    NOT_EXECUTING_LONG((short)3, "notExecutingLong"),
    LONG_STATUS_TIMESTAMP((short)4, "longStatusTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SOCKET_OK
          return SOCKET_OK;
        case 2: // LONG_IN_QUEUE
          return LONG_IN_QUEUE;
        case 3: // NOT_EXECUTING_LONG
          return NOT_EXECUTING_LONG;
        case 4: // LONG_STATUS_TIMESTAMP
          return LONG_STATUS_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SOCKETOK_ISSET_ID = 0;
  private static final int __LONGINQUEUE_ISSET_ID = 1;
  private static final int __LONGSTATUSTIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SOCKET_OK, new org.apache.thrift.meta_data.FieldMetaData("socketOK", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LONG_IN_QUEUE, new org.apache.thrift.meta_data.FieldMetaData("longInQueue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOT_EXECUTING_LONG, new org.apache.thrift.meta_data.FieldMetaData("notExecutingLong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LONG_STATUS_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("longStatusTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEnqueueTaskReservationsResponse.class, metaDataMap);
  }

  public TEnqueueTaskReservationsResponse() {
  }

  public TEnqueueTaskReservationsResponse(
    boolean socketOK,
    boolean longInQueue,
    List<String> notExecutingLong,
    double longStatusTimestamp)
  {
    this();
    this.socketOK = socketOK;
    setSocketOKIsSet(true);
    this.longInQueue = longInQueue;
    setLongInQueueIsSet(true);
    this.notExecutingLong = notExecutingLong;
    this.longStatusTimestamp = longStatusTimestamp;
    setLongStatusTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEnqueueTaskReservationsResponse(TEnqueueTaskReservationsResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.socketOK = other.socketOK;
    this.longInQueue = other.longInQueue;
    if (other.isSetNotExecutingLong()) {
      List<String> __this__notExecutingLong = new ArrayList<String>(other.notExecutingLong);
      this.notExecutingLong = __this__notExecutingLong;
    }
    this.longStatusTimestamp = other.longStatusTimestamp;
  }

  public TEnqueueTaskReservationsResponse deepCopy() {
    return new TEnqueueTaskReservationsResponse(this);
  }

  @Override
  public void clear() {
    setSocketOKIsSet(false);
    this.socketOK = false;
    setLongInQueueIsSet(false);
    this.longInQueue = false;
    this.notExecutingLong = null;
    setLongStatusTimestampIsSet(false);
    this.longStatusTimestamp = 0.0;
  }

  public boolean isSocketOK() {
    return this.socketOK;
  }

  public TEnqueueTaskReservationsResponse setSocketOK(boolean socketOK) {
    this.socketOK = socketOK;
    setSocketOKIsSet(true);
    return this;
  }

  public void unsetSocketOK() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOCKETOK_ISSET_ID);
  }

  /** Returns true if field socketOK is set (has been assigned a value) and false otherwise */
  public boolean isSetSocketOK() {
    return EncodingUtils.testBit(__isset_bitfield, __SOCKETOK_ISSET_ID);
  }

  public void setSocketOKIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOCKETOK_ISSET_ID, value);
  }

  public boolean isLongInQueue() {
    return this.longInQueue;
  }

  public TEnqueueTaskReservationsResponse setLongInQueue(boolean longInQueue) {
    this.longInQueue = longInQueue;
    setLongInQueueIsSet(true);
    return this;
  }

  public void unsetLongInQueue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGINQUEUE_ISSET_ID);
  }

  /** Returns true if field longInQueue is set (has been assigned a value) and false otherwise */
  public boolean isSetLongInQueue() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGINQUEUE_ISSET_ID);
  }

  public void setLongInQueueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGINQUEUE_ISSET_ID, value);
  }

  public int getNotExecutingLongSize() {
    return (this.notExecutingLong == null) ? 0 : this.notExecutingLong.size();
  }

  public java.util.Iterator<String> getNotExecutingLongIterator() {
    return (this.notExecutingLong == null) ? null : this.notExecutingLong.iterator();
  }

  public void addToNotExecutingLong(String elem) {
    if (this.notExecutingLong == null) {
      this.notExecutingLong = new ArrayList<String>();
    }
    this.notExecutingLong.add(elem);
  }

  public List<String> getNotExecutingLong() {
    return this.notExecutingLong;
  }

  public TEnqueueTaskReservationsResponse setNotExecutingLong(List<String> notExecutingLong) {
    this.notExecutingLong = notExecutingLong;
    return this;
  }

  public void unsetNotExecutingLong() {
    this.notExecutingLong = null;
  }

  /** Returns true if field notExecutingLong is set (has been assigned a value) and false otherwise */
  public boolean isSetNotExecutingLong() {
    return this.notExecutingLong != null;
  }

  public void setNotExecutingLongIsSet(boolean value) {
    if (!value) {
      this.notExecutingLong = null;
    }
  }

  public double getLongStatusTimestamp() {
    return this.longStatusTimestamp;
  }

  public TEnqueueTaskReservationsResponse setLongStatusTimestamp(double longStatusTimestamp) {
    this.longStatusTimestamp = longStatusTimestamp;
    setLongStatusTimestampIsSet(true);
    return this;
  }

  public void unsetLongStatusTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGSTATUSTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field longStatusTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLongStatusTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGSTATUSTIMESTAMP_ISSET_ID);
  }

  public void setLongStatusTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGSTATUSTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SOCKET_OK:
      if (value == null) {
        unsetSocketOK();
      } else {
        setSocketOK((Boolean)value);
      }
      break;

    case LONG_IN_QUEUE:
      if (value == null) {
        unsetLongInQueue();
      } else {
        setLongInQueue((Boolean)value);
      }
      break;

    case NOT_EXECUTING_LONG:
      if (value == null) {
        unsetNotExecutingLong();
      } else {
        setNotExecutingLong((List<String>)value);
      }
      break;

    case LONG_STATUS_TIMESTAMP:
      if (value == null) {
        unsetLongStatusTimestamp();
      } else {
        setLongStatusTimestamp((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SOCKET_OK:
      return isSocketOK();

    case LONG_IN_QUEUE:
      return isLongInQueue();

    case NOT_EXECUTING_LONG:
      return getNotExecutingLong();

    case LONG_STATUS_TIMESTAMP:
      return getLongStatusTimestamp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SOCKET_OK:
      return isSetSocketOK();
    case LONG_IN_QUEUE:
      return isSetLongInQueue();
    case NOT_EXECUTING_LONG:
      return isSetNotExecutingLong();
    case LONG_STATUS_TIMESTAMP:
      return isSetLongStatusTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEnqueueTaskReservationsResponse)
      return this.equals((TEnqueueTaskReservationsResponse)that);
    return false;
  }

  public boolean equals(TEnqueueTaskReservationsResponse that) {
    if (that == null)
      return false;

    boolean this_present_socketOK = true;
    boolean that_present_socketOK = true;
    if (this_present_socketOK || that_present_socketOK) {
      if (!(this_present_socketOK && that_present_socketOK))
        return false;
      if (this.socketOK != that.socketOK)
        return false;
    }

    boolean this_present_longInQueue = true;
    boolean that_present_longInQueue = true;
    if (this_present_longInQueue || that_present_longInQueue) {
      if (!(this_present_longInQueue && that_present_longInQueue))
        return false;
      if (this.longInQueue != that.longInQueue)
        return false;
    }

    boolean this_present_notExecutingLong = true && this.isSetNotExecutingLong();
    boolean that_present_notExecutingLong = true && that.isSetNotExecutingLong();
    if (this_present_notExecutingLong || that_present_notExecutingLong) {
      if (!(this_present_notExecutingLong && that_present_notExecutingLong))
        return false;
      if (!this.notExecutingLong.equals(that.notExecutingLong))
        return false;
    }

    boolean this_present_longStatusTimestamp = true;
    boolean that_present_longStatusTimestamp = true;
    if (this_present_longStatusTimestamp || that_present_longStatusTimestamp) {
      if (!(this_present_longStatusTimestamp && that_present_longStatusTimestamp))
        return false;
      if (this.longStatusTimestamp != that.longStatusTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_socketOK = true;
    list.add(present_socketOK);
    if (present_socketOK)
      list.add(socketOK);

    boolean present_longInQueue = true;
    list.add(present_longInQueue);
    if (present_longInQueue)
      list.add(longInQueue);

    boolean present_notExecutingLong = true && (isSetNotExecutingLong());
    list.add(present_notExecutingLong);
    if (present_notExecutingLong)
      list.add(notExecutingLong);

    boolean present_longStatusTimestamp = true;
    list.add(present_longStatusTimestamp);
    if (present_longStatusTimestamp)
      list.add(longStatusTimestamp);

    return list.hashCode();
  }

  @Override
  public int compareTo(TEnqueueTaskReservationsResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSocketOK()).compareTo(other.isSetSocketOK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSocketOK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socketOK, other.socketOK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongInQueue()).compareTo(other.isSetLongInQueue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongInQueue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longInQueue, other.longInQueue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotExecutingLong()).compareTo(other.isSetNotExecutingLong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotExecutingLong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notExecutingLong, other.notExecutingLong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongStatusTimestamp()).compareTo(other.isSetLongStatusTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongStatusTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longStatusTimestamp, other.longStatusTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEnqueueTaskReservationsResponse(");
    boolean first = true;

    sb.append("socketOK:");
    sb.append(this.socketOK);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longInQueue:");
    sb.append(this.longInQueue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notExecutingLong:");
    if (this.notExecutingLong == null) {
      sb.append("null");
    } else {
      sb.append(this.notExecutingLong);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("longStatusTimestamp:");
    sb.append(this.longStatusTimestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEnqueueTaskReservationsResponseStandardSchemeFactory implements SchemeFactory {
    public TEnqueueTaskReservationsResponseStandardScheme getScheme() {
      return new TEnqueueTaskReservationsResponseStandardScheme();
    }
  }

  private static class TEnqueueTaskReservationsResponseStandardScheme extends StandardScheme<TEnqueueTaskReservationsResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEnqueueTaskReservationsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SOCKET_OK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.socketOK = iprot.readBool();
              struct.setSocketOKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LONG_IN_QUEUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.longInQueue = iprot.readBool();
              struct.setLongInQueueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOT_EXECUTING_LONG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.notExecutingLong = new ArrayList<String>(_list24.size);
                String _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readString();
                  struct.notExecutingLong.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setNotExecutingLongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LONG_STATUS_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longStatusTimestamp = iprot.readDouble();
              struct.setLongStatusTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEnqueueTaskReservationsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SOCKET_OK_FIELD_DESC);
      oprot.writeBool(struct.socketOK);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_IN_QUEUE_FIELD_DESC);
      oprot.writeBool(struct.longInQueue);
      oprot.writeFieldEnd();
      if (struct.notExecutingLong != null) {
        oprot.writeFieldBegin(NOT_EXECUTING_LONG_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.notExecutingLong.size()));
          for (String _iter27 : struct.notExecutingLong)
          {
            oprot.writeString(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LONG_STATUS_TIMESTAMP_FIELD_DESC);
      oprot.writeDouble(struct.longStatusTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEnqueueTaskReservationsResponseTupleSchemeFactory implements SchemeFactory {
    public TEnqueueTaskReservationsResponseTupleScheme getScheme() {
      return new TEnqueueTaskReservationsResponseTupleScheme();
    }
  }

  private static class TEnqueueTaskReservationsResponseTupleScheme extends TupleScheme<TEnqueueTaskReservationsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEnqueueTaskReservationsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSocketOK()) {
        optionals.set(0);
      }
      if (struct.isSetLongInQueue()) {
        optionals.set(1);
      }
      if (struct.isSetNotExecutingLong()) {
        optionals.set(2);
      }
      if (struct.isSetLongStatusTimestamp()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSocketOK()) {
        oprot.writeBool(struct.socketOK);
      }
      if (struct.isSetLongInQueue()) {
        oprot.writeBool(struct.longInQueue);
      }
      if (struct.isSetNotExecutingLong()) {
        {
          oprot.writeI32(struct.notExecutingLong.size());
          for (String _iter28 : struct.notExecutingLong)
          {
            oprot.writeString(_iter28);
          }
        }
      }
      if (struct.isSetLongStatusTimestamp()) {
        oprot.writeDouble(struct.longStatusTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEnqueueTaskReservationsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.socketOK = iprot.readBool();
        struct.setSocketOKIsSet(true);
      }
      if (incoming.get(1)) {
        struct.longInQueue = iprot.readBool();
        struct.setLongInQueueIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.notExecutingLong = new ArrayList<String>(_list29.size);
          String _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readString();
            struct.notExecutingLong.add(_elem30);
          }
        }
        struct.setNotExecutingLongIsSet(true);
      }
      if (incoming.get(3)) {
        struct.longStatusTimestamp = iprot.readDouble();
        struct.setLongStatusTimestampIsSet(true);
      }
    }
  }

}

